package xfacthd.r6mod.common.datagen.providers.model.block;

import net.minecraft.data.DataGenerator;
import net.minecraft.util.Direction;
import net.minecraftforge.client.model.generators.*;
import net.minecraftforge.common.data.ExistingFileHelper;
import xfacthd.r6mod.common.R6Content;
import xfacthd.r6mod.common.data.PropertyHolder;
import xfacthd.r6mod.common.data.blockdata.WallMaterial;
import xfacthd.r6mod.common.data.blockdata.WallSegment;

public final class ReinforcementStateProvider extends R6BlockStateProvider
{
    public ReinforcementStateProvider(DataGenerator gen, ExistingFileHelper fileHelper)
    {
        super(gen, fileHelper, "reinforcement_block_states");
    }

    @Override
    protected void registerStatesAndModels()
    {
        //Stupid workaround to be able to use the models generated by the WallStateProvider
        WallStateProvider.INSTANCE.models().generatedModels.forEach((loc, model) ->
        {
            if (loc.getPath().contains("wall_soft_"))
            {
                models().generatedModels.put(loc, model);
            }
        });

        MultiPartBlockStateBuilder builder = getMultipartBuilder(R6Content.blockReinforcement);

        for (WallSegment segment : WallSegment.values())
        {
            ModelFile model = models().getExistingFile(modLoc("block/building/block_reinforcement_" + segment.getString()));

            for (Direction facing : Direction.Plane.HORIZONTAL)
            {
                builder.part()
                        .modelFile(model)
                        .rotationY(getRotation(facing))
                        .addModel()
                        .condition(PropertyHolder.FACING_HOR, facing)
                        .condition(PropertyHolder.WALL_SEGMENT, segment);

                for (WallMaterial material : WallMaterial.values())
                {
                    ModelFile wallModel = models().getExistingFile(modLoc("block/building/block_wall_soft_" + material.getString()));

                    builder.part()
                            .modelFile(wallModel)
                            .rotationY(getRotation(facing))
                            .addModel()
                            .condition(PropertyHolder.FACING_HOR, facing)
                            .condition(PropertyHolder.MATERIAL, material);
                }
            }
        }
    }
}